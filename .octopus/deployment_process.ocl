step "DacPac.Client.WorkbenchServices_Audit" {
    properties = {
        Octopus.Action.TargetRoles = "DacPacClient"
    }

    action {
        action_type = "Octopus.TentaclePackage"
        properties = {
            Octopus.Action.CustomScripts.Deploy.ps1 = <<-EOT
                #call the function from the script module loaded with this process
                DeployDacPac -publishFile "WorkbenchServices.Audit.OctoDeploy.publish.xml" -dacPacFile "WorkbenchServices_Audit.dacpac"
                
            EOT
            Octopus.Action.EnabledFeatures = "Octopus.Features.CustomScripts,Octopus.Features.SubstituteInFiles"
            Octopus.Action.Package.DownloadOnTentacle = "True"
            Octopus.Action.Package.FeedId = "#{Axioma.NugetFeed.Product}"
            Octopus.Action.Package.PackageId = "DacPac_Client_WorkbenchServices.Audit"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.SubstituteInFiles.TargetFiles = "*.publish.xml"
        }
        tenant_tags = ["Product Tags/WorkBench"]

        packages {
            acquisition_location = "ExecutionTarget"
            feed = "#{Axioma.NugetFeed.Product}"
            package_id = "DacPac_Client_WorkbenchServices.Audit"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "DacPac.Client.WorkbenchServices" {
    properties = {
        Octopus.Action.TargetRoles = "DacPacClient"
    }

    action {
        action_type = "Octopus.TentaclePackage"
        is_disabled = true
        properties = {
            Octopus.Action.CustomScripts.Deploy.ps1 = <<-EOT
                #call the function from the script module loaded with this process
                DeployDacPac -publishFile "WorkbenchServices.OctoDeploy.publish.xml" -dacPacFile "WorkbenchServices.dacpac"
                
            EOT
            Octopus.Action.EnabledFeatures = "Octopus.Features.CustomScripts,Octopus.Features.SubstituteInFiles"
            Octopus.Action.Package.DownloadOnTentacle = "True"
            Octopus.Action.Package.FeedId = "#{Axioma.NugetFeed.Product}"
            Octopus.Action.Package.PackageId = "DacPac_Client_WorkbenchServices"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.SubstituteInFiles.TargetFiles = "*.publish.xml"
        }
        tenant_tags = ["Product Tags/WorkBench"]

        packages {
            acquisition_location = "ExecutionTarget"
            feed = "#{Axioma.NugetFeed.Product}"
            package_id = "DacPac_Client_WorkbenchServices"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "ServiceFabric.Client.axWorkbenchServiceFabric" {
    properties = {
        Octopus.Action.TargetRoles = "ServiceFabricClient"
    }

    action {
        action_type = "Octopus.AzureServiceFabricApp"
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.SubstituteInFiles"
            Octopus.Action.Package.DownloadOnTentacle = "True"
            Octopus.Action.Package.FeedId = "#{Axioma.NugetFeed.Product}"
            Octopus.Action.Package.PackageId = "ServiceFabric_Client_Workbench"
            Octopus.Action.ServiceFabric.CopyPackageTimeoutSec = "3500"
            Octopus.Action.ServiceFabric.OverrideUpgradeBehavior = "None"
            Octopus.Action.ServiceFabric.OverwriteBehavior = "Always"
            Octopus.Action.ServiceFabric.PublishProfileFile = "PublishProfiles\\OctoDeploy.xml"
            Octopus.Action.ServiceFabric.RegisterApplicationTypeTimeoutSec = "3600"
            Octopus.Action.ServiceFabric.SkipPackageValidation = "False"
            Octopus.Action.SubstituteInFiles.TargetFiles = <<-EOT
                *\ServiceManifest.xml
                ApplicationParameters\OctoDeploy.xml
                PublishProfiles\OctoDeploy.xml
                ApplicationManifest.xml
                
            EOT
            OctopusUseBundledTooling = "True"
        }
        tenant_tags = ["Product Tags/WorkBench"]
        worker_pool = "Cloud Production Pool"

        packages {
            acquisition_location = "ExecutionTarget"
            feed = "#{Axioma.NugetFeed.Product}"
            package_id = "ServiceFabric_Client_Workbench"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "ServiceFabric.Client.WorkbenchInfrastructureApp" {
    properties = {
        Octopus.Action.TargetRoles = "ServiceFabricClient"
    }
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.AzureServiceFabricApp"
        is_disabled = true
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.SubstituteInFiles"
            Octopus.Action.Package.DownloadOnTentacle = "True"
            Octopus.Action.Package.FeedId = "#{Axioma.NugetFeed.Product}"
            Octopus.Action.Package.PackageId = "ServiceFabric_Client_WorkbenchInfrastructureApp"
            Octopus.Action.ServiceFabric.CopyPackageTimeoutSec = "3500"
            Octopus.Action.ServiceFabric.OverrideUpgradeBehavior = "None"
            Octopus.Action.ServiceFabric.OverwriteBehavior = "Always"
            Octopus.Action.ServiceFabric.PublishProfileFile = "PublishProfiles\\OctoDeploy.xml"
            Octopus.Action.ServiceFabric.RegisterApplicationTypeTimeoutSec = "3600"
            Octopus.Action.ServiceFabric.SkipPackageValidation = "False"
            Octopus.Action.SubstituteInFiles.TargetFiles = <<-EOT
                *\ServiceManifest.xml
                ApplicationParameters\OctoDeploy.xml
                PublishProfiles\OctoDeploy.xml
                ApplicationManifest.xml
                
            EOT
            OctopusUseBundledTooling = "True"
        }
        tenant_tags = ["Product Tags/WorkBench"]
        worker_pool = "Cloud Production Pool"

        packages {
            acquisition_location = "ExecutionTarget"
            feed = "#{Axioma.NugetFeed.Product}"
            package_id = "ServiceFabric_Client_WorkbenchInfrastructureApp"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "ServiceFabric.Client.WorkbenchUIApp" {
    properties = {
        Octopus.Action.TargetRoles = "ServiceFabricClient"
    }
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.AzureServiceFabricApp"
        is_disabled = true
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.SubstituteInFiles"
            Octopus.Action.Package.DownloadOnTentacle = "True"
            Octopus.Action.Package.FeedId = "#{Axioma.NugetFeed.Product}"
            Octopus.Action.Package.PackageId = "ServiceFabric_Client_WorkbenchUIApp"
            Octopus.Action.ServiceFabric.CopyPackageTimeoutSec = "3500"
            Octopus.Action.ServiceFabric.OverrideUpgradeBehavior = "None"
            Octopus.Action.ServiceFabric.OverwriteBehavior = "Always"
            Octopus.Action.ServiceFabric.PublishProfileFile = "PublishProfiles\\OctoDeploy.xml"
            Octopus.Action.ServiceFabric.RegisterApplicationTypeTimeoutSec = "3600"
            Octopus.Action.ServiceFabric.SkipPackageValidation = "False"
            Octopus.Action.SubstituteInFiles.TargetFiles = <<-EOT
                *\ServiceManifest.xml
                ApplicationParameters\OctoDeploy.xml
                PublishProfiles\OctoDeploy.xml
                ApplicationManifest.xml
                
            EOT
            OctopusUseBundledTooling = "True"
        }
        tenant_tags = ["Product Tags/WorkBench"]
        worker_pool = "Cloud Production Pool"

        packages {
            acquisition_location = "ExecutionTarget"
            feed = "#{Axioma.NugetFeed.Product}"
            package_id = "ServiceFabric_Client_WorkbenchUIApp"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "ServiceFabric.Client.WorkbenchServicesApp" {
    properties = {
        Octopus.Action.TargetRoles = "ServiceFabricClient"
    }
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.AzureServiceFabricApp"
        is_disabled = true
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.CustomScripts,Octopus.Features.SubstituteInFiles"
            Octopus.Action.Package.DownloadOnTentacle = "True"
            Octopus.Action.Package.FeedId = "#{Axioma.NugetFeed.Product}"
            Octopus.Action.Package.PackageId = "ServiceFabric_Client_WorkbenchServicesApp"
            Octopus.Action.ServiceFabric.CopyPackageTimeoutSec = "3500"
            Octopus.Action.ServiceFabric.OverrideUpgradeBehavior = "None"
            Octopus.Action.ServiceFabric.OverwriteBehavior = "Always"
            Octopus.Action.ServiceFabric.PublishProfileFile = "PublishProfiles\\OctoDeploy.xml"
            Octopus.Action.ServiceFabric.RegisterApplicationTypeTimeoutSec = "3600"
            Octopus.Action.ServiceFabric.SkipPackageValidation = "False"
            Octopus.Action.SubstituteInFiles.TargetFiles = <<-EOT
                *\ServiceManifest.xml
                ApplicationParameters\OctoDeploy.xml
                PublishProfiles\OctoDeploy.xml
                ApplicationManifest.xml
                
            EOT
            OctopusUseBundledTooling = "True"
        }
        tenant_tags = ["Product Tags/WorkBench"]
        worker_pool = "Cloud Production Pool"

        packages {
            acquisition_location = "ExecutionTarget"
            feed = "#{Axioma.NugetFeed.Product}"
            package_id = "ServiceFabric_Client_WorkbenchServicesApp"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Service Fabric Post Deploy Check" {
    properties = {
        Octopus.Action.TargetRoles = "ServiceFabricClient"
    }

    action {
        action_type = "Octopus.AzureServiceFabricPowerShell"
        is_disabled = true
        notes = "DEVOPS-4708 - To validate the presence/version of each ServiceFabric application on Client Clusters"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                write-host "Running post-deployment script to validate SvcFab application health."
                Write-Host "Calling API Function with below values:"
                Write-Host "------------------------------------------------------------"
                Write-Host "  spaceName:" $OctopusParameters["Octopus.Space.Name"]
                Write-Host "  projectName:" $OctopusParameters["Octopus.Project.Name"]
                Write-Host "  environmentName:" $OctopusParameters["Octopus.Environment.Name"]
                Write-Host "  releaseID:" $OctopusParameters["Octopus.Release.Id"]
                Write-Host "  taskID:" $OctopusParameters["Octopus.Task.Id"]
                Write-Host "------------------------------------------------------------"
                
                CheckServiceFabricAppVer `
                    -spaceName $OctopusParameters["Octopus.Space.Name"] `
                    -projectName $OctopusParameters["Octopus.Project.Name"] `
                	-environmentName $OctopusParameters["Octopus.Environment.Name"] `
                	-releaseID $OctopusParameters["Octopus.Release.Id"] `
                	-taskID $OctopusParameters["Octopus.Task.Id"]
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "True"
        }
        worker_pool = "Cloud Production Pool"
    }
}

step "AxiomaWorkbench Post Deploy - CDN Version" {

    action {
        action_type = "Octopus.Script"
        excluded_environments = ["Dev-FB", "Dev-CI", "Sandbox"]
        is_disabled = true
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                #
                # DEVOPS-4490 Set environment UI version from dist/version.xxxx.json on the package 
                #
                
                #login to blueApi
                Function LogIn {
                    $Form = @{
                        username   = $username
                        password   = $password
                        client_id  = $client_id
                        grant_type = "password"
                    };
                
                	try{
                		$Response = Invoke-WebRequest -Uri $authUrl -Method Post -Body $Form -UseBasicParsing;
                		Return (ConvertFrom-Json $Response).access_token;
                	} catch {
                		Write-Error "Could not log in";
                		Write-Error $_;
                		throw $_;
                		exit 1;
                	}
                }
                
                $username       = "#{axWorkbench.adminuser}"
                $password       = "#{axWorkbench.adminpassword}"
                $client_id      = "#{axWorkbench.connectors.apiClient}"
                $baseUrl        = "#{Tenant.General.ExternalUrl.PostDeploy}"
                $versionScript  = "#{Octopus.Action.Package[gallery-ui].ExtractedPath}\version.json"
                
                $authUrl      = $baseUrl + '/auth/connect/token'
                $manifestUrl  = $baseUrl + '/workbench/static/manifest.json'
                $modulesUrl   = $baseUrl + '/wb-api/applications/api/v1/modules'
                $uiVersionURL = $baseUrl + '/wb-api/applications/api/v1/manifests/version'
                $apiPing 	  = $baseUrl + '/wb-api/applications/api/ping'
                $cacheURL	  = $baseUrl + '/workbench/api/v1/config/version-cache'
                $ping         = $baseUrl + '/workbench/api/ping'
                
                Write-Host "[INFO] Octo Worker Host: $env:computername "
                Write-Host "[INFO] username: $username "
                Write-Host "[INFO] baseUrl: $baseUrl "
                Write-Host "[INFO] authUrl: $authUrl "
                
                
                $versionBody = Get-Content $versionScript -Force
                $token = LogIn
                $token = 'Bearer ' + $token
                $versionHeaders = @{
                    'Authorization' = $token
                    'Content-Type'  = 'application/json'
                    'Content-Length'= $versionBody.Length
                }
                
                # wait until the url is up
                $attempt = 0
                do {
                    try {
                        # Set version
                        Write-Host "Checking if URL is up: $apiPing"
                		Invoke-WebRequest -Uri $apiPing -UseBasicParsing -DisableKeepAlive	
                
                        if (-not $LASTEXITCODE) {
                             $success = $true
                        } else {
                            throw "Transient error. LASTEXITCODE is $LASTEXITCODE."
                        }
                    }
                    catch {
                        if ($attempt -eq 5) {
                            Write-Error "Task failed. With all $attempt attempts. Error: $($Error[0].Exception.Response.StatusCode)"
                            throw
                        }
                
                        Write-Host "Task failed. Attempt $attempt. Will retry in next $(5 * $attempt) seconds. Error: $($Error[0].Exception.Response.StatusCode)" -ForegroundColor Yellow
                        Start-Sleep -Seconds $(5 * $attempt)
                    }
                    
                    $attempt++
                    
                } until($success)
                
                # set manifest version
                $attempt = 0
                do {
                    try {
                        # Set version
                        Write-Host "Setting workbench CDN version $versionScript. Running PUT on $uiVersionURL"
                		Write-Host "JSON payload: $versionBody"
                		Invoke-WebRequest -Uri $uiVersionURL -Body $versionBody -Method PUT -Headers $versionHeaders -UseBasicParsing
                
                        if (-not $LASTEXITCODE) {
                             $success = $true
                        } else {
                            throw "Transient error. LASTEXITCODE is $LASTEXITCODE."
                        }
                    }
                    catch {
                        if ($attempt -eq 5) {
                            Write-Error "Task failed. With all $attempt attempts. Error: $($Error[0].Exception.Response.StatusCode)"
                            throw
                        }
                
                        Write-Host "Task failed. Attempt $attempt. Will retry in next $(5 * $attempt) seconds. Error: $($Error[0].Exception.Response.StatusCode)" -ForegroundColor Yellow
                        Start-Sleep -Seconds $(5 * $attempt)
                    }
                    
                    $attempt++
                    
                } until($success)
                
                
                # Clear cache
                Write-Host "Clearing cache: Running DELETE on $cacheURL"
                try{
                    Invoke-WebRequest -Uri $cacheURL -Method DELETE -Headers $versionHeaders -UseBasicParsing
                }
                catch{
                    Write-Error $_
                }
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        tenant_tags = ["Product Tags/WorkBench"]
        worker_pool = "Cloud Production Pool"

        packages "gallery-ui" {
            acquisition_location = "ExecutionTarget"
            feed = "Artifactory - Product Packages"
            package_id = "gallery-ui"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "Run a Script" {

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = "Write-Host $OctopusParameters[\"Axioma.NugetFeed.Product\"]"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "Default Worker Pool"

        packages "ServiceFabric_Client_WorkbenchUIApp" {
            acquisition_location = "Server"
            feed = "Artifactory - Product Packages"
            package_id = "ServiceFabric_Client_WorkbenchUIApp"
            properties = {
                Extract = "False"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}